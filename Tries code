#include<bits/stdc++.h>
using namespace std;
class Tries{
  public:
   bool wordEnd; 
   unordered_map<char ,Tries*>child;
   // constructor
   Tries(){
     wordEnd = false;
   }

// destructor  
   ~ Tries(){
     wordEnd = false;
     for( auto& it : child){
        delete it.second; 
     }
   }
//------------------insert--------------//
void insert(string s, Tries* node, int ind){
if( node == NULL) return ; 
if(node->child.count(s[ind]) ==0 ){
    node->child[s[ind]] = new Tries();  
}
if( ind == s.size()-1){
    node-> wordEnd = true; 
    return; 
}
return insert( s, node->child[s[ind]], ind+1);
}

//----------check word----------------------//
bool check(string s, Tries* node, int ind){
if( node == NULL)return false; 
if( ind == s.size()-1){
   return  node-> wordEnd; 
    
}

if(node->child.count(s[ind]) ==0 ){
  return false;   
}

return check( s, node->child[s[ind]], ind+1);
}

//------delete a word ----------//
void remove(string s, Tries* node, int ind){ 
if( node == NULL or node->child.count(s[ind])==0) return; 
if( ind == s.size()-1){
    node-> wordEnd = false;
   return; 
}

remove( s, node->child[s[ind]], ind+1); 
} 

};
int main()
{
  Tries* root = new Tries () ; 
 root->insert( "ankush", root , 0); 
  root->insert( "ankush", root , 0); 
   root->insert( "ankus", root , 0); 
 cout<<root->check( "ankush", root,0)<<endl; 
 
 delete root; 
return 0;
}
